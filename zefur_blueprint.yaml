blueprint:
  name: Zero Effort Feeding Utility and Regulator (ZEFUR)
  description: Calculates daily feeding requirements based on pet weight, divides this into optimal portions based on serving size, and determines the best number of meals to closely match these portions.
  domain: automation
  input:
    pet_weight:
      name: Pet Weight
      description: Enter the weight of your pet in pounds.
      selector:
        entity:
          domain: input_number
    food_per_pound:
      name: Food per Pound
      description: Enter the amount of food in grams per pound of pet weight.
      selector:
        number:
          min: 1.0
          max: 100.0
          step: .01
          unit_of_measurement: "g"
    base_food:
      name: Base Food
      description: The amount of food to feed a hypothetical 0-weight pet. This value is used along with the 'Food per Pound' value to calculate how much food the pet should receive each day.
      selector:
        number:
          min: 0.0
          max: 50.0
          step: .01
          unit_of_measurement: "g"
    portion_size:
      name: Portion Size
      description: Enter the size of one portion of food in grams. This is the amount dispensed from the feeder when pressing the manual button once.
      selector:
        number:
          min: 1.0
          max: 100.0
          step: .05
          unit_of_measurement: "g"
    maximum_meals:
      name: Maximum Meals
      description: The maximum number of meals you want to feed in a day.
      default: 10
      selector:
        number:
          min: 2
          max: 50
    on_schedule_change:
      name: On Schedule Change
      description: The script to run when the schedule changes. This script should accept a JSON object representing the schedule and set the schedule appropriately.
      selector:
        entity:
          domain: script

trigger:
  platform: state
  entity_id: input_number.pet_weight

action:
  - variables:
      pet_weight: "{{ states('input_number.pet_weight') | float }}"
      food_per_lb: "{{ states('input_number.food_per_pound') | float }}"
      base_food: "{{ states('input_number.base_food') | float }}"
      portion_size: "{{ states('input_number.portion_size') | float }}"
      total_food: "{{ (pet_weight * food_per_lb + base_food) | round(2) }}"
      total_portions: "{{ (total_food / portion_size) | round(0) }}"
      portions_per_meal: "{{ (total_food / meals_per_day) | round(2) }}"
      optimal_meals: 1
      meals_per_day: >-
        {% set possible_meals = range(1, 10) | map('int') %}
        {% set meal_ratios = possible_meals | map(attribute='__div__', other=total_portions) %}
        {% set closest_meal = meal_ratios | min %}
        {{ closest_meal }}
      # Calculate the time gap between meals
      time_gap_minutes: "{{ 24 * 60 // meals_per_day }}"
      current_time_minutes: 0
      current_meal: 1
      feeder_schedule: []
  - repeat:
      sequence:
        - variables:
            current_meals: 1
            optimal_meals: 1
            smallest_remainder: "{{ total_portions }}"
        - repeat:
            sequence:
              - variables:
                  remainder: "{{ total_portions % current_meals }}"
              - choose:
                  - conditions: "{{ remainder < smallest_remainder }}"
                    sequence:
                      - variables:
                          smallest_remainder: "{{ remainder }}"
                          optimal_meals: "{{ current_meals }}"
              - variables:
                  current_meals: "{{ current_meals + 1 }}"
            until:
              - "{{ current_meals > states('input_number.maximum_meals') | int }}"
      until:
        - "{{ current_meals > states('input_number.maximum_meals') | int }}"
  - repeat:
      while:
        - "{{ current_meal <= meals_per_day }}"
      sequence:
        - variables:
            current_hour: "{{ current_time_minutes // 60 }}"
            current_minute: "{{ ((current_time_minutes % 60) // 15) * 15 }}"
            schedule_entry:
              days: "everyday"
              hour: "{{ current_hour }}"
              minute: "{{ current_minute }}"
              size: "{{ portion_size }}"
        - variables:
            feeder_schedule: "{{ feeder_schedule + [schedule_entry] }}"
            current_time_minutes: "{{ current_time_minutes + time_gap_minutes }}"
            current_meal: "{{ current_meal + 1 }}"
